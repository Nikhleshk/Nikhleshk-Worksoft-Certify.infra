parameters: 
    - name: target    

stages: 
- stage: ${{ parameters.target }}
  displayName: Build and Deploy ${{ parameters.target }} Environment
  condition: or(and(contains(variables['Build.SourceBranch'], 'refs/heads/feature'), eq('${{ parameters.target }}','dev')),  and(contains(variables['Build.SourceBranch'], 'refs/heads/release'), eq('${{ parameters.target }}','test')),  and(contains(variables['Build.SourceBranch'], 'refs/heads/release'), eq('${{ parameters.target }}','prod')))
  variables:
  - template: "../../../${{ parameters.target }}variables.yml"
  jobs:
  - deployment: ${{ parameters.target }}Deployment
    environment: ${{ parameters.target }}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              KeyVaultName: 'otk-${{variables.shortapplicationname}}-${{ parameters.target }}-kv'
              SecretsFilter: '*'
              RunAsPreJob: true
          
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'authorization artifacts'
              itemPattern: '**/*'
              targetPath: '$(Pipeline.Workspace)'
          
          - task: AzurePowerShell@5
            displayName: 'Granting Service Connection SPN access to DB'
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              ScriptType: 'InlineScript'
              Inline: |
                function ConvertTo-Sid {
                  param (
                  [string]$appId
                  )
                  [guid]$guid = [System.Guid]::Parse($appId)
                  foreach ($byte in $guid.ToByteArray()) {
                  $byteGuid += [System.String]::Format("{0:X2}", $byte)
                  }
                  return "0x" + $byteGuid
                }
                function ConnectAndExecuteSql {
                param (
                  [string] $sqlServerName,
                  [string] $sqlDatabaseName,
                  [string] $sqlServerUID = $null,
                  [string] $sqlServerPWD = $null,
                  [string] $Query
                  )
                  Write-Host "##[command]$($Query)"           
                  $sqlServerFQN = "$($sqlServerName).database.windows.net"
                  $ConnectionString = "Server=tcp:$($sqlServerFQN);Database=$sqlDatabaseName;UID=$sqlServerUID;PWD=$sqlServerPWD;Trusted_Connection=False;Encrypt=True;Connection Timeout=60;"
          
                  $Connection = New-Object System.Data.SqlClient.SqlConnection($ConnectionString)
                  $Connection.Open()
                  $sqlCmd = New-Object System.Data.SqlClient.SqlCommand($query, $Connection)
                  $sqlCmd.ExecuteNonQuery()
                  $Connection.Close()
                }
         
                $context = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext
                $AzureDevOpsServicePrincipal = Get-AzADServicePrincipal -ApplicationId $Context.Account.Id
          
                $sid = ConvertTo-Sid -appId $Context.Account.Id
                $ServicePrincipalName = $AzureDevOpsServicePrincipal.DisplayName
                $sqlDatabaseName = "$(dbName)"
                $Query = "IF NOT EXISTS(SELECT 1 FROM sys.database_principals WHERE name ='$ServicePrincipalName')
                  BEGIN
                  CREATE USER [$ServicePrincipalName] WITH DEFAULT_SCHEMA=[dbo], SID = $sid, TYPE = E;
                  END
                  IF IS_ROLEMEMBER('db_owner','$ServicePrincipalName') = 0
                  BEGIN
                  ALTER ROLE db_owner ADD MEMBER [$ServicePrincipalName]
                  END
                  GRANT CONTROL ON DATABASE::[$sqlDatabaseName] TO [$ServicePrincipalName];"
                Write-Host "##[command]SQL Admin password: $(otk-otkbusobjlib-sqladm)"
                ConnectAndExecuteSql -Query $Query -sqlServerName '$(dbServer)' -sqlDatabaseName '$(dbName)' -sqlServerUID '$(dbAdmin)' -sqlServerPWD '$(otk-otkbusobjlib-sqladm)' -OutputSqlErrors $true
              azurePowerShellVersion: 'LatestVersion'          
          
          - task: AzurePowerShell@5
            displayName: 'Getting Service Connection's Access Token to Azure SQL'
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              ScriptType: InlineScript
              Inline: |
                $context = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext
                $sqlToken = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $context.Tenant.Id.ToString(), $null, [Microsoft.Azure.Commands.Common.Authentication.ShowDialog]::Never, $null, "https://database.windows.net").AccessToken
                Write-Host ("##vso[task.setvariable variable=SQLTOKEN;issecret=true]$sqlToken")
              azurePowerShellVersion: LatestVersion          
          
          - task: AzurePowerShell@5
            displayName: Setup DDMRP Schema Authorization using Access token and SQL Script
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              azurePowerShellVersion: 'LatestVersion'
              scriptType: inlinescript
              Inline: |                
                $sqlServerFQN = "$(dbServer).database.windows.net"
                Import-Module -Name SqlServer -Verbose                
                Invoke-SqlCmd -ServerInstance "$($sqlServerFQN)" `
                  -Database "$(dbName)" `
                  -AccessToken $(sqlToken) `
                  -InputFile "$(System.DefaultWorkingDirectory)/authorization/schema_permissions/obol.ddmrp.sql" -OutputSqlErrors $true -Verbose | Out-File -FilePath "$(System.DefaultWorkingDirectory)/obol.ddmrp.log"
                $log = Get-Content -Path "$(System.DefaultWorkingDirectory)/obol.ddmrp.log"
                write-host $log
          
          - task: AzurePowerShell@5
            displayName: Create local ONP Service SQL Account using Access token and password from Key Vault with SQL Script
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              azurePowerShellVersion: 'LatestVersion'
              scriptType: inlinescript
              Inline:  |
                $sqlServerFQN = "$(dbServer).database.windows.net"
                Import-Module -Name SqlServer -Verbose                
                Invoke-SqlCmd -ServerInstance "$($sqlServerFQN)" `
                  -Database "$(dbName)" `
                  -AccessToken $(sqlToken) `
                  -Variable "password='$(grpobolonpdev)'" `
                  -InputFile "$(System.DefaultWorkingDirectory)/authorization/obol.onp.serviceaccount.sql" -OutputSqlErrors $true -Verbose
          
          - task: AzurePowerShell@5
            displayName: Setup KPI Schema Authorization using Access token and SQL Script
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              azurePowerShellVersion: 'LatestVersion'
              scriptType: inlinescript
              Inline: |
                $sqlServerFQN = "$(dbServer).database.windows.net"
                Import-Module -Name SqlServer -Verbose
                Invoke-SqlCmd -ServerInstance "$($sqlServerFQN)" `
                  -Database "$(dbName)" `
                  -AccessToken $(sqlToken) `
                  -InputFile "$(System.DefaultWorkingDirectory)/authorization/schema_permissions/obol.kpi.sql" -OutputSqlErrors $true -Verbose
          
          - task: AzurePowerShell@5
            displayName: Setup WIMM Schema Authorization using Access token and SQL Script
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              azurePowerShellVersion: 'LatestVersion'
              scriptType: inlinescript
              Inline: |
                $sqlServerFQN = "$(dbServer).database.windows.net"
                Import-Module -Name SqlServer -Verbose
                Invoke-SqlCmd -ServerInstance "$($sqlServerFQN)" `
                  -Database "$(dbName)" `
                  -AccessToken $(sqlToken) `
                  -InputFile "$(System.DefaultWorkingDirectory)/authorization/schema_permissions/obol.wimm.sql" -OutputSqlErrors $true -Verbose          

          - task: AzurePowerShell@5
            displayName: Setup KPI Schema Authorization using Access token and SQL Script
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              azurePowerShellVersion: 'LatestVersion'
              scriptType: inlinescript
              Inline: |
                $sqlServerFQN = "$(dbServer).database.windows.net"
                Import-Module -Name SqlServer -Verbose
                Invoke-SqlCmd -ServerInstance "$($sqlServerFQN)" `
                  -Database "$(dbName)" `
                  -AccessToken $(sqlToken) `
                  -InputFile "$(System.DefaultWorkingDirectory)/authorization/schema_permissions/obol.kpi.sql" -OutputSqlErrors $true -Verbose

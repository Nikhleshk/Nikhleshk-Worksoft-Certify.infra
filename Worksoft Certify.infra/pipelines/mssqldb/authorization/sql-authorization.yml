# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - feature
    - develop
    - main
  paths:
    include:
    - authorization/*

pool:
  name: 'OBOL Agent Pool'
#  name: PCS-Azure-Auto-Agent
  
resources:
  repositories:
  - repository: self
    type: git
    ref: refs/heads/master

variables:
- template: "../../../parameters/globalvariables.yml"

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - checkout: self
      fetchDepth: 2
    - task: PublishPipelineArtifact@1
      displayName: Publish Pipeline Artifact
      inputs:
        path: authorization
        artifactName: 'authorization artifacts'
- stage: Development
  variables:
  - template: "authorization/devvariables.yml"
  - name: environment
    value: dev
  jobs:
  - deployment: Dev
    environment: Dev
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              KeyVaultName: 'otk-$(shortapplicationname)-$(environment)-kv'
              SecretsFilter: '*'
              RunAsPreJob: true
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'authorization artifacts'
              itemPattern: '**/*'
              targetPath: '$(Pipeline.Workspace)'
          - task: AzurePowerShell@5
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              ScriptType: 'InlineScript'
              Inline: |
                function ConvertTo-Sid {
                  param (
                  [string]$appId
                  )
                  [guid]$guid = [System.Guid]::Parse($appId)
                  foreach ($byte in $guid.ToByteArray()) {
                  $byteGuid += [System.String]::Format("{0:X2}", $byte)
                  }
                  return "0x" + $byteGuid
                }
                function ConnectAndExecuteSql {
                param (
                  [string] $sqlServerName,
                  [string] $sqlDatabaseName,
                  [string] $sqlServerUID = $null,
                  [string] $sqlServerPWD = $null,
                  [string] $Query
                  )
                  Write-Host "##[command]$($Query)"           
                  $sqlServerFQN = "$($sqlServerName).database.windows.net"
                  $ConnectionString = "Server=tcp:$($sqlServerFQN);Database=$sqlDatabaseName;UID=$sqlServerUID;PWD=$sqlServerPWD;Trusted_Connection=False;Encrypt=True;Connection Timeout=60;"
          
                  $Connection = New-Object System.Data.SqlClient.SqlConnection($ConnectionString)
                  $Connection.Open()
                  $sqlCmd = New-Object System.Data.SqlClient.SqlCommand($query, $Connection)
                  $sqlCmd.ExecuteNonQuery()
                  $Connection.Close()
                }
         
                $context = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext
                $AzureDevOpsServicePrincipal = Get-AzADServicePrincipal -ApplicationId $Context.Account.Id
          
                $sid = ConvertTo-Sid -appId $Context.Account.Id
                $ServicePrincipalName = $AzureDevOpsServicePrincipal.DisplayName
                $sqlDatabaseName = "$(dbName)"
                $Query = "IF NOT EXISTS(SELECT 1 FROM sys.database_principals WHERE name ='$ServicePrincipalName')
                  BEGIN
                  CREATE USER [$ServicePrincipalName] WITH DEFAULT_SCHEMA=[dbo], SID = $sid, TYPE = E;
                  END
                  IF IS_ROLEMEMBER('db_owner','$ServicePrincipalName') = 0
                  BEGIN
                  ALTER ROLE db_owner ADD MEMBER [$ServicePrincipalName]
                  END
                  GRANT CONTROL ON DATABASE::[$sqlDatabaseName] TO [$ServicePrincipalName];"
                Write-Host "##[command]SQL Admin password: $(otk-otkbusobjlib-sqladm)"
                ConnectAndExecuteSql -Query $Query -sqlServerName '$(dbServer)' -sqlDatabaseName '$(dbName)' -sqlServerUID '$(dbAdmin)' -sqlServerPWD '$(otk-otkbusobjlib-sqladm)' -OutputSqlErrors $true
              azurePowerShellVersion: 'LatestVersion'          
          - task: AzurePowerShell@5
            displayName: 'Getting Access Token to Azure SQL'
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              ScriptType: InlineScript
              Inline: |
                $context = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext
                $sqlToken = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $context.Tenant.Id.ToString(), $null, [Microsoft.Azure.Commands.Common.Authentication.ShowDialog]::Never, $null, "https://database.windows.net").AccessToken
                Write-Host ("##vso[task.setvariable variable=SQLTOKEN;]$sqlToken")
              azurePowerShellVersion: LatestVersion          
          - task: AzurePowerShell@5
            displayName: Setup DDMRP Schema Authorization
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              azurePowerShellVersion: 'LatestVersion'
              scriptType: inlinescript
              Inline: |                
                $sqlServerFQN = "$(dbServer).database.windows.net"
                Import-Module -Name SqlServer -Verbose                
                Invoke-SqlCmd -ServerInstance "$($sqlServerFQN)" `
                  -Database "$(dbName)" `
                  -AccessToken $(sqlToken) `
                  -InputFile "$(System.DefaultWorkingDirectory)/authorization/schema_permissions/obol.ddmrp.sql" -OutputSqlErrors $true -Verbose | Out-File -FilePath "$(System.DefaultWorkingDirectory)/obol.ddmrp.log"
                $log = Get-Content -Path "$(System.DefaultWorkingDirectory)/obol.ddmrp.log"
                write-host $log
          - task: AzurePowerShell@5
            displayName: Create ONP Service Account
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              azurePowerShellVersion: 'LatestVersion'
              scriptType: inlinescript
              Inline:  |
                $sqlServerFQN = "$(dbServer).database.windows.net"
                Import-Module -Name SqlServer -Verbose                
                Invoke-SqlCmd -ServerInstance "$($sqlServerFQN)" `
                  -Database "$(dbName)" `
                  -AccessToken $(sqlToken) `
                  -Variable "password='$(grpobolonpdev)'" `
                  -InputFile "$(System.DefaultWorkingDirectory)/authorization/obol.onp.serviceaccount.sql" -OutputSqlErrors $true -Verbose
          - task: AzurePowerShell@5
            displayName: Setup KPI Schema Authorization
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              azurePowerShellVersion: 'LatestVersion'
              scriptType: inlinescript
              Inline: |
                $sqlServerFQN = "$(dbServer).database.windows.net"
                Import-Module -Name SqlServer -Verbose
                Invoke-SqlCmd -ServerInstance "$($sqlServerFQN)" `
                  -Database "$(dbName)" `
                  -AccessToken $(sqlToken) `
                  -InputFile "$(System.DefaultWorkingDirectory)/authorization/schema_permissions/obol.kpi.sql" -OutputSqlErrors $true -Verbose
          - task: AzurePowerShell@5
            displayName: Setup WIMM Schema Authorization
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              azurePowerShellVersion: 'LatestVersion'
              scriptType: inlinescript
              Inline: |
                $sqlServerFQN = "$(dbServer).database.windows.net"
                Import-Module -Name SqlServer -Verbose
                Invoke-SqlCmd -ServerInstance "$($sqlServerFQN)" `
                  -Database "$(dbName)" `
                  -AccessToken $(sqlToken) `
                  -InputFile "$(System.DefaultWorkingDirectory)/authorization/schema_permissions/obol.wimm.sql" -OutputSqlErrors $true -Verbose          
          - task: AzurePowerShell@5
            displayName: Setup KPI Schema Authorization
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              azurePowerShellVersion: 'LatestVersion'
              scriptType: inlinescript
              Inline: |
                $sqlServerFQN = "$(dbServer).database.windows.net"
                Import-Module -Name SqlServer -Verbose
                Invoke-SqlCmd -ServerInstance "$($sqlServerFQN)" `
                  -Database "$(dbName)" `
                  -AccessToken $(sqlToken) `
                  -InputFile "$(System.DefaultWorkingDirectory)/authorization/schema_permissions/obol.kpi.sql" -OutputSqlErrors $true -Verbose
- stage: Testing
  condition: and(succeeded(), in(variables['build.sourceBranch'], 'refs/heads/main', 'refs/heads/develop'))
  variables:
  - template: "authorization/testvariables.yml"
  - name: environment
    value: test
  jobs:
  - deployment: Test
    environment: Test
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              KeyVaultName: 'otk-$(shortapplicationname)-$(environment)-kv'
              SecretsFilter: '*'
              RunAsPreJob: true
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'authorization artifacts'
              itemPattern: '**/*'
              targetPath: '$(Pipeline.Workspace)'
          - task: AzurePowerShell@5
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              ScriptType: 'InlineScript'
              Inline: |
                function ConvertTo-Sid {
                  param (
                  [string]$appId
                  )
                  [guid]$guid = [System.Guid]::Parse($appId)
                  foreach ($byte in $guid.ToByteArray()) {
                  $byteGuid += [System.String]::Format("{0:X2}", $byte)
                  }
                  return "0x" + $byteGuid
                }
                function ConnectAndExecuteSql {
                param (
                  [string] $sqlServerName,
                  [string] $sqlDatabaseName,
                  [string] $sqlServerUID = $null,
                  [string] $sqlServerPWD = $null,
                  [string] $Query
                  )
                  Write-Host "##[command]$($Query)"           
                  $sqlServerFQN = "$($sqlServerName).database.windows.net"
                  $ConnectionString = "Server=tcp:$($sqlServerFQN);Database=$sqlDatabaseName;UID=$sqlServerUID;PWD=$sqlServerPWD;Trusted_Connection=False;Encrypt=True;Connection Timeout=60;"
          
                  $Connection = New-Object System.Data.SqlClient.SqlConnection($ConnectionString)
                  $Connection.Open()
                  $sqlCmd = New-Object System.Data.SqlClient.SqlCommand($query, $Connection)
                  $sqlCmd.ExecuteNonQuery()
                  $Connection.Close()
                }
         
                $context = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext
                $AzureDevOpsServicePrincipal = Get-AzADServicePrincipal -ApplicationId $Context.Account.Id
          
                $sid = ConvertTo-Sid -appId $Context.Account.Id
                $ServicePrincipalName = $AzureDevOpsServicePrincipal.DisplayName
                $sqlDatabaseName = "$(dbName)"
                $Query = "IF NOT EXISTS(SELECT 1 FROM sys.database_principals WHERE name ='$ServicePrincipalName')
                  BEGIN
                  CREATE USER [$ServicePrincipalName] WITH DEFAULT_SCHEMA=[dbo], SID = $sid, TYPE = E;
                  END
                  IF IS_ROLEMEMBER('db_owner','$ServicePrincipalName') = 0
                  BEGIN
                  ALTER ROLE db_owner ADD MEMBER [$ServicePrincipalName]
                  END
                  GRANT CONTROL ON DATABASE::[$sqlDatabaseName] TO [$ServicePrincipalName];"
                Write-Host "##[command]SQL Admin password: $(otk-otkbusobjlib-sqladm)"
                ConnectAndExecuteSql -Query $Query -sqlServerName '$(dbServer)' -sqlDatabaseName '$(dbName)' -sqlServerUID '$(dbAdmin)' -sqlServerPWD '$(otk-otkbusobjlib-sqladm)' -OutputSqlErrors $true
              azurePowerShellVersion: 'LatestVersion'          
          - task: AzurePowerShell@5
            displayName: 'Getting Access Token to Azure SQL'
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              ScriptType: InlineScript
              Inline: |
                $context = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext
                $sqlToken = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $context.Tenant.Id.ToString(), $null, [Microsoft.Azure.Commands.Common.Authentication.ShowDialog]::Never, $null, "https://database.windows.net").AccessToken
                Write-Host ("##vso[task.setvariable variable=SQLTOKEN;]$sqlToken")
              azurePowerShellVersion: LatestVersion          
          - task: AzurePowerShell@5
            displayName: Setup DDMRP Schema Authorization
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              azurePowerShellVersion: 'LatestVersion'
              scriptType: inlinescript
              Inline: |                
                $sqlServerFQN = "$(dbServer).database.windows.net"
                Import-Module -Name SqlServer -Verbose                
                Invoke-SqlCmd -ServerInstance "$($sqlServerFQN)" `
                  -Database "$(dbName)" `
                  -AccessToken $(sqlToken) `
                  -InputFile "$(System.DefaultWorkingDirectory)/authorization/schema_permissions/obol.ddmrp.sql" -OutputSqlErrors $true -Verbose | Out-File -FilePath "$(System.DefaultWorkingDirectory)/obol.ddmrp.log"
                $log = Get-Content -Path "$(System.DefaultWorkingDirectory)/obol.ddmrp.log"
                write-host $log
          - task: AzurePowerShell@5
            displayName: Setup ONP Schema Authorization
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              azurePowerShellVersion: 'LatestVersion'
              scriptType: inlinescript
              Inline:  |
                $sqlServerFQN = "$(dbServer).database.windows.net"
                Import-Module -Name SqlServer -Verbose                
                Invoke-SqlCmd -ServerInstance "$($sqlServerFQN)" `
                  -Database "$(dbName)" `
                  -AccessToken $(sqlToken) `
                  -InputFile "$(System.DefaultWorkingDirectory)/authorization/schema_permissions/obol.onp.sql" -OutputSqlErrors $true -Verbose
          - task: AzurePowerShell@5
            displayName: Setup WIMM Schema Authorization
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              azurePowerShellVersion: 'LatestVersion'
              scriptType: inlinescript
              Inline: |
                $sqlServerFQN = "$(dbServer).database.windows.net"
                Import-Module -Name SqlServer -Verbose
                Invoke-SqlCmd -ServerInstance "$($sqlServerFQN)" `
                  -Database "$(dbName)" `
                  -AccessToken $(sqlToken) `
                  -InputFile "$(System.DefaultWorkingDirectory)/authorization/schema_permissions/obol.wimm.sql" -OutputSqlErrors $true -Verbose          
          - task: AzurePowerShell@5
            displayName: Setup KPI Schema Authorization
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              azurePowerShellVersion: 'LatestVersion'
              scriptType: inlinescript
              Inline: |
                $sqlServerFQN = "$(dbServer).database.windows.net"
                Import-Module -Name SqlServer -Verbose
                Invoke-SqlCmd -ServerInstance "$($sqlServerFQN)" `
                  -Database "$(dbName)" `
                  -AccessToken $(sqlToken) `
                  -InputFile "$(System.DefaultWorkingDirectory)/authorization/schema_permissions/obol.kpi.sql" -OutputSqlErrors $true -Verbose
- stage: Production
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/main'))
  variables:
  - template: "authorization/prodvariables.yml"
  - name: environment
    value: prod
  jobs:
  - deployment: Prod
    environment: Prod
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              KeyVaultName: 'otk-$(shortapplicationname)-$(environment)-kv'
              SecretsFilter: '*'
              RunAsPreJob: true
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'authorization artifacts'
              itemPattern: '**/*'
              targetPath: '$(Pipeline.Workspace)'
          - task: AzurePowerShell@5
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              ScriptType: 'InlineScript'
              Inline: |
                function ConvertTo-Sid {
                  param (
                  [string]$appId
                  )
                  [guid]$guid = [System.Guid]::Parse($appId)
                  foreach ($byte in $guid.ToByteArray()) {
                  $byteGuid += [System.String]::Format("{0:X2}", $byte)
                  }
                  return "0x" + $byteGuid
                }
                function ConnectAndExecuteSql {
                param (
                  [string] $sqlServerName,
                  [string] $sqlDatabaseName,
                  [string] $sqlServerUID = $null,
                  [string] $sqlServerPWD = $null,
                  [string] $Query
                  )
                  Write-Host "##[command]$($Query)"           
                  $sqlServerFQN = "$($sqlServerName).database.windows.net"
                  $ConnectionString = "Server=tcp:$($sqlServerFQN);Database=$sqlDatabaseName;UID=$sqlServerUID;PWD=$sqlServerPWD;Trusted_Connection=False;Encrypt=True;Connection Timeout=60;"
          
                  $Connection = New-Object System.Data.SqlClient.SqlConnection($ConnectionString)
                  $Connection.Open()
                  $sqlCmd = New-Object System.Data.SqlClient.SqlCommand($query, $Connection)
                  $sqlCmd.ExecuteNonQuery()
                  $Connection.Close()
                }
         
                $context = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext
                $AzureDevOpsServicePrincipal = Get-AzADServicePrincipal -ApplicationId $Context.Account.Id
          
                $sid = ConvertTo-Sid -appId $Context.Account.Id
                $ServicePrincipalName = $AzureDevOpsServicePrincipal.DisplayName
                $sqlDatabaseName = "$(dbName)"
                $Query = "IF NOT EXISTS(SELECT 1 FROM sys.database_principals WHERE name ='$ServicePrincipalName')
                  BEGIN
                  CREATE USER [$ServicePrincipalName] WITH DEFAULT_SCHEMA=[dbo], SID = $sid, TYPE = E;
                  END
                  IF IS_ROLEMEMBER('db_owner','$ServicePrincipalName') = 0
                  BEGIN
                  ALTER ROLE db_owner ADD MEMBER [$ServicePrincipalName]
                  END
                  GRANT CONTROL ON DATABASE::[$sqlDatabaseName] TO [$ServicePrincipalName];"
                Write-Host "##[command]SQL Admin password: $(otk-otkbusobjlib-sqladm)"
                ConnectAndExecuteSql -Query $Query -sqlServerName '$(dbServer)' -sqlDatabaseName '$(dbName)' -sqlServerUID '$(dbAdmin)' -sqlServerPWD '$(otk-otkbusobjlib-sqladm)' -OutputSqlErrors $true
              azurePowerShellVersion: 'LatestVersion'          
          - task: AzurePowerShell@5
            displayName: 'Getting Access Token to Azure SQL'
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              ScriptType: InlineScript
              Inline: |
                $context = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext
                $sqlToken = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $context.Tenant.Id.ToString(), $null, [Microsoft.Azure.Commands.Common.Authentication.ShowDialog]::Never, $null, "https://database.windows.net").AccessToken
                Write-Host ("##vso[task.setvariable variable=SQLTOKEN;]$sqlToken")
              azurePowerShellVersion: LatestVersion          
          - task: AzurePowerShell@5
            displayName: Setup DDMRP Schema Authorization
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              azurePowerShellVersion: 'LatestVersion'
              scriptType: inlinescript
              Inline: |                
                $sqlServerFQN = "$(dbServer).database.windows.net"
                Import-Module -Name SqlServer -Verbose                
                Invoke-SqlCmd -ServerInstance "$($sqlServerFQN)" `
                  -Database "$(dbName)" `
                  -AccessToken $(sqlToken) `
                  -InputFile "$(System.DefaultWorkingDirectory)/authorization/schema_permissions/obol.ddmrp.sql" -OutputSqlErrors $true -Verbose | Out-File -FilePath "$(System.DefaultWorkingDirectory)/obol.ddmrp.log"
                $log = Get-Content -Path "$(System.DefaultWorkingDirectory)/obol.ddmrp.log"
                write-host $log
          - task: AzurePowerShell@5
            displayName: Setup ONP Schema Authorization
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              azurePowerShellVersion: 'LatestVersion'
              scriptType: inlinescript
              Inline:  |
                $sqlServerFQN = "$(dbServer).database.windows.net"
                Import-Module -Name SqlServer -Verbose                
                Invoke-SqlCmd -ServerInstance "$($sqlServerFQN)" `
                  -Database "$(dbName)" `
                  -AccessToken $(sqlToken) `
                  -InputFile "$(System.DefaultWorkingDirectory)/authorization/schema_permissions/obol.onp.sql" -OutputSqlErrors $true -Verbose
          - task: AzurePowerShell@5
            displayName: Setup WIMM Schema Authorization
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              azurePowerShellVersion: 'LatestVersion'
              scriptType: inlinescript
              Inline: |
                $sqlServerFQN = "$(dbServer).database.windows.net"
                Import-Module -Name SqlServer -Verbose
                Invoke-SqlCmd -ServerInstance "$($sqlServerFQN)" `
                  -Database "$(dbName)" `
                  -AccessToken $(sqlToken) `
                  -InputFile "$(System.DefaultWorkingDirectory)/authorization/schema_permissions/obol.wimm.sql" -OutputSqlErrors $true -Verbose          
          - task: AzurePowerShell@5
            displayName: Setup KPI Schema Authorization
            inputs:
              azureSubscription: '${{variables.AzureSubscription}}'
              azurePowerShellVersion: 'LatestVersion'
              scriptType: inlinescript
              Inline: |
                $sqlServerFQN = "$(dbServer).database.windows.net"
                Import-Module -Name SqlServer -Verbose
                Invoke-SqlCmd -ServerInstance "$($sqlServerFQN)" `
                  -Database "$(dbName)" `
                  -AccessToken $(sqlToken) `
                  -InputFile "$(System.DefaultWorkingDirectory)/authorization/schema_permissions/obol.kpi.sql" -OutputSqlErrors $true -Verbose
